<application>
  <component name="AppStorage">
    <histories>
      <item value="Calculated padded input size per channel: (4 x 4). Kernel size: (5 x 5). Kernel size can't be greater than actual input size" />
      <item value="RuntimeError: CUDA error: invalid device ordinal CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect. For debugging consider passing CUDA_LAUNCH_BLOCKING=1." />
      <item value="AttributeError: module 'numpy' has no attribute 'from_numpy'" />
      <item value="attribute" />
      <item value="could not convert string '-0.294118,0.487437,0.180328,-0.292929,0,0.00149028,-0.53117,-0.0333333,0' to float32 at row 0, column 1." />
      <item value="ValueError: only one element tensors can be converted to Python scalars" />
      <item value="x and y must have same first dimension, but have shapes (0,) and (1001,)" />
      <item value="UserWarning: size_average and reduce args will be deprecated, please use reduction='sum' instead." />
      <item value="deprecated" />
      <item value="shape : tuple of ints Shape of created array. dtype : data-type, optional Any object that can be interpreted as a numpy data type. buffer : object exposing buffer interface, optional Used to fill the array with data. offset : int, optional Offset of array data in buffer. strides : tuple of ints, optional Strides of data in memory. order : {'C', 'F'}, optional Row-major (C-style) or column-major (Fortran-style) order." />
      <item value="&quot;&quot;&quot; ndarray(shape, dtype=float, buffer=None, offset=0, strides=None, order=None) An array object represents a multidimensional, homogeneous array of fixed-size items. An associated data-type object describes the format of each element in the array (its byte-order, how many bytes it occupies in memory, whether it is an integer, a floating point number, or something else, etc.) Arrays should be constructed using `array`, `zeros` or `empty` (refer to the See Also section below). The parameters given here refer to a low-level method (`ndarray(...)`) for instantiating an array. For more information, refer to the `numpy` module and examine the methods and attributes of an array." />
      <item value="interpolate" />
      <item value="zeros" />
      <item value="traub" />
      <item value="temp" />
      <item value="You may be wondering what this giant blob of binary data here is, you might even be worried that we're up to something nefarious (good for you for being paranoid!). This is a base85 encoding of a zip file, this zip file contains an entire copy of pip (version 22.2.2). Pip is a thing that installs packages, pip itself is a package that someone might want to install, especially if they're looking to run this get-pip.py script. Pip has a lot of code to deal with the security of installing packages, various edge cases on various platforms, and other such sort of &quot;tribal knowledge&quot; that has been encoded in its code base. Because of this we basically include an entire copy of pip inside this blob. We do this because the alternatives are attempt to implement a &quot;minipip&quot; that probably doesn't do things correctly and has weird edge cases, or compress pip itself down into a single file. If you're wondering how this is created, it is generated using `scriptsgenerate.py` in https:github.compypaget-pip." />
      <item value="Creates a new image with the given mode and size. :param mode: The mode to use for the new image. See: :ref:`concept-modes`. :param size: A 2-tuple, containing (width, height) in pixels. :param color: What color to use for the image. Default is black. If given, this should be a single integer or floating point value for single-band modes, and a tuple for multi-band modes (one value per band). When creating RGB images, you can also use color strings as supported by the ImageColor module. If the color is None, the image is not initialised. :returns: An :py:class:`~PIL.Image.Image` object." />
      <item value="illow==8" />
      <item value="ZeroDivisionError: division by zero" />
      <item value="height" />
      <item value="align corners" />
      <item value="bilinear" />
      <item value="dilation" />
      <item value="check images and mask" />
      <item value="SyntaxError: invalid decimal literal" />
      <item value="Keyboard Interrupt" />
      <item value="Record" />
      <item value="TypeError: 'type' object is not subscriptable" />
      <item value="io.UnsupportedOperation: not readable" />
      <item value="AttributeError: 'builtin_function_or_method' object has no attribute 'sleep'" />
      <item value="Open file and return a stream. Raise OSError upon failure." />
      <item value="'r' open for reading (default) 'w' open for writing, truncating the file first 'x' create a new file and open it for writing 'a' open for writing, appending to the end of the file if it exists 'b' binary mode 't' text mode (default) '+' open a disk file for updating (reading and writing) 'U' universal newline mode (deprecated)" />
      <item value="Open file and return a stream. Raise OSError upon failure. file is either a text or byte string giving the name (and the path if the file isn't in the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned IO object is closed, unless closefd is set to False.) mode is an optional string that specifies the mode in which the file is opened. It defaults to 'r' which means open for reading in text mode. Other common values are 'w' for writing (truncating the file if it already exists), 'x' for creating and writing to a new file, and 'a' for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position). In text mode, if encoding is not specified the encoding used is platform dependent: locale.getpreferredencoding(False) is called to get the current locale encoding. (For reading and writing raw bytes use binary mode and leave encoding unspecified.) The available modes are:" />
      <item value="Text IO Wrapper" />
      <item value="Text" />
      <item value="subscriptable" />
      <item value="strip" />
      <item value="TypeError: 'tuple' object is not callable" />
      <item value="callable" />
      <item value="TypeError: 'list' object cannot be interpreted as an integer" />
      <item value="fromarray" />
      <item value="hue" />
      <item value="jitter" />
      <item value="parentheses" />
      <item value="SyntaxError: Missing parentheses in call to 'print'. Did you mean print(i, element)?" />
      <item value="Missing" />
      <item value="SyntaxError: unexpected EOF while parsing" />
      <item value="Cannot work out file type of" />
      <item value="Image File Error" />
      <item value="dimages" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="101" />
        <entry key="ENGLISH" value="95" />
        <entry key="ROMANIAN" value="1" />
        <entry key="ITALIAN" value="1" />
        <entry key="HINDI" value="3" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1670655157600" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20200305000393002" />
      </app-key>
    </option>
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="702e8bcf19a93b80" />
      </youdao-translate>
    </option>
  </component>
</application>